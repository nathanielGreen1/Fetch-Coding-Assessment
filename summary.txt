1. I chose Java because that is the language I feel the most comfortable with. I also know how to use python, but I have more experience reading in from files with Java. For my program, I decided to use an arraylist to store all of the transactions, and create payer objects that held the overall balance of each payer. I used an arraylist because I wanted to have some sort of data structure that would allow me to sort the transactions based on time, but also one that had variable length. I decided to sort the arraylist as I read in from the files. At the same time, I created payer objects. I added payer objects into a hashmap (with the keys being the name of the payer) so that they would have a fast lookup time. I wanted to be able to efficiently store both the transactions and the balance of each payer and I felt the arraylist and hashmap were effective tools to do so.

2. I think that an advantage to my solution is that it is efficient in a few different ways. I think that my use of a hashmap is beneficial because it has constant lookup time. I think that combining the three tasks of reading in from the file, creating the payer objects, and sorting the arraylist of transactions is also efficient. Another advantage to my solution is that it is expandable. I think that because I created the payer objects there are a lot more things I could do with them. If I wanted to change the program, or build a similar program I could reuse the payer class. 
A disadvantage I think my solution has is that there is potentially a loss of efficiency with the add method in the arraylist. The add method shifts a bunch of data down an index when something is inserted early in the list. Because of this, inserting a lot of transactions could be very slow. I considered using a different data structure such as a linked list to hold the transactions and iterating across but you're not able to insert into a linked list while using an iterator.

3. My favorite program I have ever wrote was one I wrote for the linear algebra research my professor Dr. Kim and I am doing. The conjecture were focused on derives a polynomial from two square matrices A and B (both are nxn). The conjecture states that this polynomial (containing the entries from A and B) will always be positive, no matter what entries A and B have. The proof that this polynomial is always positive requires a positive semi-definite matrix Q. I wrote a program that produces a perfect Q matrix based on any n. The size of Q quickly grows, for example, when n is 9 Q is roughly 600x600. This project was especially meaningful to me because I worked on the program as we made progress on the problem, so I got to see the program grow as our knowledge did. When I first started the program we didn't even know if there was a Q matrix that would work for n=3, and much less be able to build it. This program was acted as a very useful tool to us as it allowed us to computationally confirm our results, and made it easier to recognize patterns. When I started the program I also had no experience using sage (python), so it was especially fun getting to learn the new language. The program was especially challenging because there were so many conditions that it had to satisfy, and I had to figure out how to make the program work whether I was building a 16x16 matrix or a 600x600 matrix.

